
from ldpc import encode, decode
from bitstring import BitArray
K = 128
N = 384
P = [[62, 10, 89, 108], [113, 86, 53, 109], [56, 104, 117, 8], [6, 111, 21, 67], [24, 84, 124, 51], [58, 55, 34, 75], [94, 30, 72, 125], [9, 59, 1, 33], [106, 2, 20, 32], [88, 41, 118, 48], [13, 74, 82, 123], [38, 80, 17, 78], [31, 45, 119, 97], [44, 37, 105, 25], [35, 23, 43, 15], [28, 83, 121, 70], [11, 4, 92, 52], [14, 81, 73, 39], [79, 115, 90, 77], [65, 96, 93, 110], [127, 69, 0, 91], [54, 42, 87, 100], [126, 71, 76, 18], [122, 98, 61, 103], [66, 12, 19, 112], [116, 60, 47, 27], [85, 114, 64, 99], [22, 16, 46, 102], [95, 49, 120, 107], [29, 57, 7, 36], [3, 101, 50, 5], [26, 40, 68, 63], [103, 55, 124, 54], [8, 116, 87, 70], [80, 89, 14, 38], [109, 75, 29, 95], [90, 93, 106, 34], [64, 16, 32, 1], [92, 117, 76, 22], [79, 23, 20, 53], [33, 40, 71, 105], [13, 30, 6, 121], [81, 15, 98, 48], [56, 18, 74, 25], [67, 42, 99, 46], [17, 57, 85, 94], [101, 83, 68, 9], [5, 78, 19, 36], [118, 61, 110, 126], [26, 91, 41, 77], [62, 50, 63, 84], [24, 100, 113, 104], [59, 60, 112, 65], [39, 123, 28, 97], [52, 96, 127, 27], [2, 12, 82, 107], [125, 35, 119, 86], [120, 11, 102, 21], [111, 66, 73, 0], [88, 114, 49, 108], [43, 7, 115, 4], [58, 51, 44, 47], [122, 10, 37, 31], [72, 3, 69, 45], [27, 11, 124, 47], [50, 3, 4, 65], [20, 80, 74, 13], [87, 115, 93, 113], [32, 66, 43, 48], [60, 114, 18, 110], [45, 30, 46, 6], [90, 10, 103, 123], [127, 99, 71, 70], [92, 59, 44, 106], [1, 17, 104, 73], [89, 0, 29, 5], [75, 23, 79, 125], [108, 56, 119, 111], [82, 112, 15, 22], [118, 105, 21, 54], [40, 16, 109, 98], [39, 96, 81, 9], [67, 52, 37, 86], [85, 42, 77, 7], [61, 25, 36, 57], [49, 88, 24, 33], [68, 102, 94, 34], [116, 120, 35, 53], [38, 51, 84, 117], [28, 26, 83, 78], [122, 64, 95, 58], [63, 55, 121, 97], [72, 14, 69, 12], [76, 91, 126, 19], [100, 41, 31, 8], [107, 101, 2, 62], [7, 37, 55, 126], [119, 4, 59, 36], [102, 29, 26, 78], [35, 33, 57, 70], [60, 14, 116, 82], [11, 48, 79, 13], [122, 80, 83, 17], [34, 106, 39, 3], [76, 24, 6, 90], [103, 10, 71, 45], [31, 77, 91, 98], [86, 61, 58, 67], [73, 56, 38, 127], [1, 15, 88, 40], [66, 42, 96, 84], [19, 44, 53, 20], [125, 93, 16, 104], [105, 112, 101, 51], [115, 120, 108, 41], [49, 5, 74, 62], [9, 43, 68, 110], [28, 111, 85, 94], [121, 65, 107, 64], [27, 99, 52, 23], [8, 87, 97, 0], [117, 32, 22, 54], [81, 95, 114, 92], [100, 50, 89, 123], [118, 12, 25, 72], [113, 63, 124, 18], [2, 75, 109, 21], [46, 30, 47, 69], [47, 120, 126, 92], [63, 123, 124, 84], [71, 42, 99, 127], [115, 53, 29, 35], [57, 80, 102, 26], [94, 101, 17, 46], [39, 118, 125, 66], [10, 91, 52, 104], [54, 62, 44, 83], [106, 109, 15, 13], [114, 77, 105, 8], [89, 97, 107, 4], [74, 6, 72, 20], [3, 21, 69, 30], [96, 19, 49, 111], [22, 88, 24, 58], [59, 5, 121, 90], [82, 79, 41, 45], [95, 12, 36, 81], [7, 67, 51, 113], [34, 27, 1, 117], [116, 78, 2, 18], [50, 100, 43, 9], [48, 60, 11, 0], [98, 87, 38, 108], [73, 25, 70, 40], [76, 32, 112, 14], [64, 16, 65, 37], [68, 86, 55, 61], [122, 93, 110, 23], [103, 33, 56, 31], [75, 28, 85, 119], [81, 104, 113, 18], [95, 44, 9, 92], [1, 29, 100, 31], [98, 48, 4, 39], [87, 65, 74, 88], [43, 116, 38, 52], [32, 3, 26, 46], [103, 25, 60, 13], [2, 12, 112, 28], [108, 27, 35, 111], [64, 96, 126, 21], [70, 37, 118, 89], [15, 102, 6, 94], [16, 71, 107, 62], [55, 85, 119, 42], [127, 72, 124, 73], [54, 41, 11, 14], [109, 122, 114, 40], [105, 101, 63, 34], [8, 36, 117, 45], [68, 33, 115, 17], [51, 106, 86, 120], [19, 75, 49, 50], [82, 93, 123, 67], [110, 53, 78, 10], [97, 5, 61, 91], [125, 79, 80, 59], [23, 56, 24, 57], [58, 47, 66, 77], [99, 76, 20, 30], [69, 0, 121, 83], [22, 84, 90, 7], [124, 32, 106, 8], [120, 86, 59, 127], [121, 77, 40, 68], [112, 65, 47, 44], [14, 116, 20, 12], [19, 49, 78, 11], [35, 25, 123, 39], [52, 76, 60, 107], [53, 15, 115, 34], [54, 66, 41, 80], [90, 28, 0, 111], [64, 63, 55, 70], [17, 2, 109, 57], [58, 67, 24, 56], [30, 22, 84, 3], [36, 92, 113, 46], [37, 50, 98, 81], [33, 125, 13, 122], [10, 5, 62, 6], [61, 21, 82, 38], [102, 43, 42, 45], [95, 114, 110, 4], [89, 9, 94, 117], [87, 105, 79, 27], [88, 85, 72, 18], [51, 48, 108, 119], [16, 23, 1, 73], [75, 101, 26, 71], [126, 93, 7, 118], [31, 97, 104, 74], [96, 103, 99, 91], [29, 100, 69, 83], [6, 88, 75, 19], [101, 68, 20, 98], [107, 45, 28, 121], [87, 26, 59, 34], [44, 35, 12, 127], [42, 40, 56, 9], [47, 80, 16, 89], [78, 21, 14, 100], [1, 110, 65, 115], [90, 113, 8, 15], [85, 70, 66, 83], [32, 67, 108, 73], [53, 76, 41, 111], [109, 13, 17, 91], [95, 31, 122, 82], [119, 99, 120, 7], [123, 71, 86, 69], [77, 50, 97, 22], [5, 126, 43, 125], [118, 52, 38, 102], [48, 55, 29, 116], [27, 24, 103, 94], [23, 106, 18, 61], [33, 92, 93, 81], [0, 79, 25, 4], [96, 63, 3, 72], [49, 84, 74, 114], [57, 51, 60, 39], [37, 112, 36, 62], [11, 64, 54, 104], [58, 46, 10, 124], [117, 30, 105, 2]]
w = BitArray('0b01101111110010111001011111001001111111111100101011111000001011111111000110000101010000011011110110100001011101000011001110001010')
x = encode(K, P, w)
assert x == BitArray('0b011011111100101110010111110010011111111111001010111110000010111111110001100001010100000110111101101000010111010000110011100010101111101110010011110111011101000000000000010100111111000100111101110110001111010100101010011111111100000110011000001111100001001110100110010001100001010010001010100010011100001001100110011010010100001110000111011101110111011011001010111010011101101011011110')
y = BitArray('0b000011011100101100000011100000011101101010001000110010000010010111000000000000000000000100001100000000010000000000100001000000100111100110000011010111011001000000000000000000110001000000111101000010001001010000000010000101111000000010011000001110100000000000100100010000000000000000000000000010011100000001000110010000010000000010000011000001000101000011000010000010001001101001001010')
q = BitArray('0b111100100011000011011100010011000010010101110110001100000001101000111111101111011110010011110011101110100111111101010010110110001000011001111000101000000100011100001001111110001110000100000010110100100110001110101001111010000111111100000100100001000111011110011011101111110001111010011010110100000011011100101001001010001101111100101100011110110010011000101001111101010110000010010100')
hat_y = decode(K, P, y, q)
assert hat_y is not None
hat_w = hat_y[:K]
assert hat_w == w
