
from ldpc import encode, decode
from bitstring import BitArray
K = 128
N = 384
P = [[14, 77, 104, 50], [94, 7, 76, 103], [99, 35, 47, 79], [27, 66, 28, 1], [93, 92, 95, 38], [59, 62, 90, 52], [127, 11, 71, 24], [96, 110, 117, 69], [25, 55, 122, 29], [23, 36, 70, 5], [33, 124, 51, 18], [31, 83, 73, 67], [65, 105, 10, 91], [40, 4, 74, 126], [123, 60, 107, 58], [109, 101, 0, 121], [53, 112, 32, 17], [37, 43, 118, 68], [13, 57, 115, 108], [16, 48, 97, 86], [84, 56, 34, 116], [22, 72, 41, 15], [49, 30, 114, 120], [113, 54, 20, 87], [44, 6, 8, 102], [82, 106, 19, 46], [111, 63, 78, 9], [61, 100, 85, 75], [2, 125, 64, 98], [81, 80, 45, 119], [12, 88, 3, 26], [39, 89, 21, 42], [13, 86, 120, 46], [102, 61, 24, 124], [99, 83, 45, 125], [76, 122, 17, 25], [48, 14, 71, 87], [11, 18, 30, 39], [62, 123, 44, 113], [36, 74, 0, 78], [114, 1, 56, 59], [37, 89, 95, 80], [3, 73, 69, 105], [108, 42, 16, 96], [92, 117, 91, 77], [72, 19, 109, 119], [40, 6, 84, 68], [33, 115, 116, 9], [28, 81, 43, 126], [38, 15, 100, 32], [4, 55, 70, 27], [97, 7, 111, 34], [90, 41, 50, 12], [23, 29, 63, 98], [66, 49, 75, 110], [60, 64, 107, 101], [94, 8, 67, 52], [127, 20, 103, 51], [118, 65, 54, 5], [58, 47, 93, 104], [2, 21, 106, 79], [35, 10, 82, 88], [53, 112, 31, 57], [26, 85, 22, 121], [14, 101, 75, 30], [92, 56, 31, 54], [65, 45, 119, 58], [28, 9, 0, 81], [78, 35, 64, 37], [42, 48, 23, 115], [96, 112, 1, 11], [100, 91, 73, 53], [43, 72, 46, 127], [16, 106, 57, 49], [22, 121, 76, 20], [18, 2, 52, 7], [66, 34, 90, 10], [24, 114, 41, 124], [60, 6, 109, 15], [85, 111, 39, 13], [32, 102, 44, 4], [61, 123, 99, 12], [3, 36, 86, 26], [84, 103, 33, 8], [69, 50, 98, 118], [126, 29, 97, 104], [40, 107, 80, 122], [25, 67, 19, 113], [74, 51, 87, 70], [62, 47, 83, 110], [68, 117, 94, 63], [116, 82, 5, 120], [108, 59, 105, 93], [55, 125, 79, 95], [38, 88, 77, 17], [89, 71, 21, 27], [67, 120, 89, 63], [95, 8, 47, 3], [117, 18, 33, 105], [107, 62, 70, 85], [96, 76, 125, 38], [102, 112, 97, 7], [81, 84, 98, 30], [1, 94, 31, 116], [0, 68, 34, 24], [37, 32, 59, 19], [49, 50, 9, 29], [42, 86, 82, 114], [83, 43, 110, 100], [36, 119, 56, 74], [79, 80, 35, 13], [77, 72, 26, 53], [14, 124, 61, 17], [6, 64, 118, 78], [109, 10, 58, 27], [46, 45, 23, 52], [5, 40, 11, 113], [21, 123, 16, 92], [54, 115, 57, 106], [108, 127, 66, 48], [93, 4, 101, 75], [69, 25, 104, 103], [88, 91, 87, 2], [99, 41, 60, 44], [51, 65, 20, 126], [22, 39, 28, 121], [90, 12, 73, 111], [122, 71, 15, 55], [99, 65, 39, 4], [26, 6, 126, 69], [32, 105, 53, 1], [63, 35, 18, 77], [16, 37, 106, 98], [19, 110, 92, 83], [12, 11, 79, 70], [51, 23, 20, 102], [113, 13, 103, 57], [94, 45, 56, 62], [2, 121, 36, 80], [27, 125, 42, 82], [115, 41, 47, 122], [100, 123, 90, 33], [127, 87, 46, 7], [76, 38, 54, 93], [10, 104, 29, 72], [21, 15, 67, 85], [109, 124, 49, 48], [101, 95, 43, 108], [118, 66, 111, 64], [44, 75, 25, 8], [31, 61, 120, 22], [89, 97, 3, 73], [17, 78, 116, 71], [112, 119, 0, 96], [107, 81, 30, 117], [34, 91, 28, 86], [55, 24, 5, 114], [40, 68, 9, 14], [58, 59, 88, 52], [84, 60, 74, 50], [19, 84, 106, 81], [30, 11, 109, 75], [49, 68, 52, 42], [108, 55, 101, 21], [18, 46, 125, 117], [31, 120, 40, 78], [44, 88, 36, 48], [73, 99, 93, 79], [64, 16, 32, 127], [60, 115, 123, 86], [118, 105, 43, 87], [8, 97, 9, 13], [24, 35, 56, 121], [12, 103, 110, 95], [80, 70, 45, 38], [116, 26, 100, 107], [98, 112, 57, 3], [74, 76, 89, 33], [92, 69, 124, 4], [0, 6, 2, 102], [51, 29, 15, 113], [114, 37, 5, 67], [104, 63, 66, 47], [23, 27, 111, 126], [72, 62, 39, 41], [54, 94, 85, 14], [77, 28, 53, 71], [7, 34, 82, 58], [90, 65, 119, 59], [17, 22, 91, 10], [83, 50, 1, 122], [25, 96, 61, 20], [74, 4, 126, 25], [122, 107, 120, 80], [43, 61, 116, 103], [84, 9, 82, 3], [67, 90, 44, 118], [85, 39, 10, 96], [65, 42, 29, 37], [112, 109, 95, 7], [23, 31, 35, 50], [22, 1, 70, 6], [69, 57, 88, 121], [21, 62, 13, 89], [86, 11, 123, 45], [99, 63, 28, 91], [104, 36, 54, 94], [2, 115, 127, 53], [87, 100, 16, 93], [113, 56, 108, 14], [19, 110, 52, 68], [102, 78, 79, 81], [15, 55, 72, 92], [51, 12, 34, 47], [101, 83, 18, 20], [71, 73, 59, 24], [77, 119, 38, 49], [114, 105, 17, 0], [5, 26, 97, 32], [40, 8, 125, 106], [30, 117, 41, 64], [111, 58, 33, 76], [66, 60, 48, 46], [98, 27, 75, 124], [102, 24, 9, 50], [2, 118, 86, 107], [93, 18, 101, 44], [48, 115, 32, 100], [22, 91, 94, 78], [59, 92, 98, 15], [97, 7, 11, 68], [4, 112, 40, 1], [116, 6, 53, 111], [13, 109, 113, 23], [64, 19, 20, 34], [126, 117, 85, 106], [52, 3, 72, 0], [74, 124, 125, 27], [84, 71, 36, 29], [35, 60, 81, 5], [30, 88, 41, 21], [8, 108, 12, 37], [56, 103, 75, 114], [31, 66, 55, 65], [87, 70, 83, 122], [62, 76, 80, 120], [51, 46, 73, 90], [25, 17, 67, 127], [89, 39, 58, 26], [63, 105, 82, 110], [99, 57, 33, 10], [42, 121, 28, 95], [104, 79, 49, 61], [45, 96, 14, 54], [119, 123, 38, 47], [77, 69, 43, 16]]
w = BitArray('0b10100001111101100111000001001100110110010110100111100110101000001111100101001110111011110001100111001111000110100011011100100111')
x = encode(K, P, w)
assert x == BitArray('0b101000011111011001110000010011001101100101101001111001101010000011111001010011101110111100011001110011110001101000110111001001111100001111001100101101001000110001100111001100011000011100101111011011001111000110000111100110011110110000000110010011001010001001010111011100100001110011111110111011111000011000111001010101000111101000010000011111001100110010100100110111001010001000011101')
y = BitArray('0b100000011001010000000000000001001001000001001000001001100000000001000001010000001010000100001001010011100000100000100100001000011000000001000100101101000000110000000101000100011000011000101110001010001010000010000010100000011010110000000100010001000000000001010011000000100000100001100110010001100000011000110001010100000111000000000000011100000100000010000100010000001000001000000101')
q = BitArray('0b011100100110101111110001110110110100101110100001110000001110000110111010100111100100111011110010100100011101011001011011110111100110001110111001010010111110000111110010001010000100000101000001110101100101101100010101011111000100001011111010100010111011001000101100111110010101011010011000101110011000100110001100000011110000101001011100000011011000110000101000100111010111100101011010')
hat_y = decode(K, P, y, q)
assert hat_y is not None
hat_w = hat_y[:K]
assert hat_w == w
