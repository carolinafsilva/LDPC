
from ldpc import encode, decode
from bitstring import BitArray
K = 128
N = 384
P = [[91, 54, 29, 119], [78, 63, 73, 121], [64, 51, 111, 26], [14, 24, 61, 67], [36, 23, 65, 2], [107, 34, 109, 11], [13, 104, 113, 57], [52, 6, 3, 98], [30, 18, 66, 48], [55, 72, 1, 105], [125, 33, 20, 35], [0, 15, 76, 86], [127, 95, 80, 114], [27, 32, 122, 79], [8, 106, 71, 93], [68, 5, 88, 117], [31, 101, 96, 41], [4, 44, 62, 69], [47, 75, 16, 115], [92, 43, 7, 118], [99, 39, 9, 94], [77, 81, 97, 50], [74, 38, 58, 89], [56, 12, 124, 46], [49, 116, 10, 87], [83, 102, 108, 19], [25, 53, 126, 123], [45, 85, 60, 103], [112, 82, 90, 17], [70, 21, 120, 40], [22, 42, 100, 59], [84, 37, 28, 110], [103, 122, 5, 53], [78, 42, 109, 4], [26, 49, 69, 48], [76, 85, 91, 99], [13, 73, 15, 56], [77, 115, 98, 125], [44, 127, 123, 41], [28, 111, 121, 20], [39, 6, 29, 107], [70, 31, 46, 35], [67, 36, 30, 52], [59, 119, 117, 100], [19, 24, 51, 33], [79, 83, 57, 94], [14, 63, 27, 65], [47, 10, 118, 87], [93, 3, 12, 18], [9, 43, 50, 92], [96, 74, 126, 72], [60, 71, 1, 106], [102, 105, 90, 68], [101, 104, 21, 45], [17, 7, 95, 113], [116, 80, 34, 88], [120, 11, 75, 22], [124, 89, 0, 37], [108, 110, 81, 8], [84, 38, 40, 55], [2, 32, 25, 97], [16, 62, 23, 112], [114, 61, 58, 86], [54, 66, 82, 64], [67, 86, 84, 49], [88, 18, 24, 89], [20, 83, 92, 32], [13, 23, 8, 66], [44, 76, 43, 94], [42, 98, 72, 12], [85, 26, 70, 110], [40, 64, 31, 21], [9, 2, 80, 28], [61, 103, 75, 50], [114, 91, 97, 71], [102, 51, 74, 15], [119, 38, 35, 124], [3, 82, 39, 78], [99, 123, 95, 68], [101, 127, 62, 46], [109, 37, 115, 77], [57, 52, 29, 69], [96, 27, 104, 41], [30, 11, 33, 7], [65, 53, 5, 17], [58, 25, 87, 111], [10, 81, 117, 47], [93, 45, 54, 107], [116, 14, 118, 79], [60, 59, 22, 105], [48, 120, 6, 126], [122, 106, 121, 108], [100, 19, 63, 16], [55, 1, 4, 113], [34, 125, 73, 36], [90, 56, 0, 112], [114, 36, 108, 14], [95, 111, 38, 1], [118, 119, 59, 102], [84, 70, 46, 78], [92, 62, 25, 19], [123, 47, 58, 77], [79, 51, 115, 40], [90, 73, 7, 24], [42, 55, 3, 10], [64, 76, 82, 32], [83, 0, 31, 94], [67, 93, 74, 33], [8, 80, 110, 39], [29, 126, 69, 116], [5, 52, 54, 4], [87, 18, 104, 57], [45, 56, 127, 121], [91, 109, 34, 65], [12, 124, 27, 13], [100, 112, 48, 85], [125, 2, 71, 89], [49, 35, 81, 107], [86, 68, 9, 16], [105, 21, 63, 88], [15, 75, 17, 43], [96, 26, 6, 117], [61, 113, 50, 98], [20, 106, 44, 103], [28, 22, 53, 11], [41, 66, 99, 60], [30, 97, 37, 101], [122, 72, 120, 23], [2, 64, 48, 57], [75, 118, 119, 92], [125, 61, 8, 87], [28, 73, 16, 0], [39, 79, 99, 77], [36, 89, 127, 12], [32, 11, 24, 94], [69, 4, 54, 53], [124, 62, 90, 21], [126, 100, 46, 116], [9, 113, 59, 123], [33, 10, 63, 117], [107, 83, 58, 34], [52, 80, 96, 76], [115, 60, 121, 67], [44, 55, 102, 15], [82, 120, 85, 45], [84, 26, 122, 114], [42, 40, 56, 29], [30, 17, 14, 88], [13, 97, 37, 93], [47, 49, 7, 98], [110, 6, 68, 18], [38, 81, 109, 19], [51, 35, 1, 27], [74, 3, 5, 70], [101, 43, 112, 86], [78, 66, 108, 25], [111, 50, 103, 20], [104, 22, 23, 72], [91, 71, 95, 65], [106, 41, 105, 31], [79, 75, 57, 25], [23, 20, 4, 11], [54, 68, 87, 121], [71, 73, 2, 34], [106, 122, 120, 15], [101, 28, 124, 9], [118, 35, 14, 88], [30, 113, 53, 117], [85, 76, 44, 111], [66, 74, 95, 46], [64, 18, 36, 33], [40, 104, 62, 22], [109, 80, 72, 77], [81, 39, 59, 99], [82, 29, 114, 19], [123, 108, 100, 27], [41, 67, 32, 91], [93, 26, 84, 16], [17, 47, 96, 52], [13, 45, 125, 83], [10, 105, 112, 31], [55, 103, 60, 63], [37, 98, 48, 6], [50, 110, 86, 119], [89, 58, 97, 7], [126, 51, 115, 94], [61, 92, 102, 1], [78, 56, 8, 90], [116, 38, 42, 24], [127, 0, 107, 12], [21, 5, 49, 3], [43, 65, 70, 69], [74, 93, 96, 56], [98, 29, 109, 33], [115, 55, 81, 35], [86, 80, 71, 32], [85, 22, 57, 101], [23, 119, 43, 50], [89, 52, 116, 78], [105, 124, 102, 41], [126, 36, 45, 58], [61, 38, 65, 79], [66, 117, 123, 37], [51, 18, 3, 44], [120, 99, 25, 20], [28, 26, 82, 48], [2, 84, 76, 49], [111, 118, 127, 17], [60, 97, 77, 94], [47, 107, 83, 12], [73, 11, 87, 70], [6, 19, 30, 4], [75, 90, 122, 0], [8, 92, 27, 62], [67, 112, 5, 9], [68, 110, 16, 40], [64, 114, 54, 104], [106, 42, 113, 100], [91, 24, 72, 39], [53, 88, 95, 69], [59, 34, 31, 121], [125, 13, 14, 21], [1, 10, 7, 63], [15, 108, 46, 103], [18, 9, 49, 54], [104, 65, 37, 120], [105, 119, 100, 22], [28, 19, 8, 2], [123, 7, 92, 56], [60, 43, 82, 127], [112, 61, 5, 111], [80, 47, 51, 17], [48, 42, 34, 124], [57, 64, 75, 16], [73, 102, 72, 117], [126, 20, 62, 33], [107, 52, 41, 23], [114, 77, 89, 3], [70, 32, 40, 76], [15, 116, 69, 78], [24, 36, 44, 46], [84, 109, 39, 90], [68, 50, 86, 0], [6, 58, 110, 29], [21, 38, 10, 125], [98, 31, 99, 87], [63, 95, 30, 45], [67, 74, 96, 11], [93, 122, 101, 85], [4, 103, 94, 115], [106, 14, 97, 66], [88, 55, 79, 25], [118, 59, 113, 83], [27, 26, 91, 81], [1, 71, 13, 53], [35, 121, 108, 12]]
w = BitArray('0b01001000010001110111100010010101000100001111010111000001100101011110000110001100011011100101111111011110010110000100100011000100')
x = encode(K, P, w)
assert x == BitArray('0b010010000100011101111000100101010001000011110101110000011001010111100001100011000110111001011111110111100101100001001000110001000011110010111100011011110100001100001010000001010100001111011001110010111110110111100001000010110001001101010011100110001101010001000101001110110100101010101101001100010001011100110011010111101110010110111011100000111111110010010010010100001111101110110111')
y = BitArray('0b000000000000000001111000000100010001000011110100000000010001000000100000100001000000001001011011110010100101100001000000100000000010110010101100001000000000000100000010000001000000000011011001100000110000010011000000000000010000000100010000100110000101000000000001001000000000100000001101001100000000000000100001000011000010010100100010100000101100010000010000010100000010001110100101')
q = BitArray('0b011110011111111100000100101011001110001000001011111011101010011111000111011110010110110010000100000101001000010110001101011011111001000000010010110011111111101000111100000100010100101100000000011010001110100100101111100111101011011011101111001001001000010011000110110110111110001111110000010001111001111100010010011100111100101010011001000110010011100010101110100000001101110001011010')
hat_y = decode(K, P, y, q)
assert hat_y is not None
hat_w = hat_y[:K]
assert hat_w == w
