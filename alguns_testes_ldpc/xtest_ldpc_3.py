
from ldpc import encode, decode
from bitstring import BitArray
K = 128
N = 384
P = [[34, 78, 6, 48], [3, 122, 94, 63], [121, 37, 10, 47], [90, 70, 125, 22], [79, 41, 15, 91], [31, 85, 35, 110], [26, 59, 106, 98], [52, 84, 28, 77], [1, 101, 123, 17], [18, 40, 36, 5], [21, 80, 96, 11], [57, 102, 60, 9], [56, 87, 12, 69], [112, 73, 33, 103], [39, 74, 13, 92], [99, 127, 124, 117], [23, 111, 120, 29], [104, 42, 67, 109], [53, 126, 115, 62], [58, 89, 114, 71], [38, 0, 86, 24], [65, 43, 19, 97], [100, 4, 50, 61], [8, 32, 88, 14], [30, 27, 68, 16], [75, 45, 83, 46], [82, 25, 76, 95], [116, 107, 119, 2], [72, 7, 49, 55], [93, 54, 51, 66], [118, 81, 20, 108], [44, 105, 113, 64], [124, 94, 96, 45], [92, 102, 39, 64], [127, 81, 65, 14], [11, 19, 34, 38], [47, 12, 23, 57], [93, 111, 25, 119], [21, 27, 85, 54], [98, 48, 107, 7], [46, 71, 56, 2], [41, 122, 29, 35], [100, 28, 82, 52], [62, 49, 44, 83], [31, 67, 60, 50], [15, 99, 5, 114], [63, 74, 18, 95], [16, 37, 33, 118], [109, 51, 20, 120], [113, 123, 86, 77], [58, 24, 3, 4], [73, 112, 72, 32], [17, 101, 66, 1], [105, 55, 22, 108], [121, 40, 126, 103], [42, 110, 8, 125], [91, 78, 61, 0], [13, 84, 116, 36], [9, 87, 43, 6], [26, 70, 59, 30], [79, 10, 69, 104], [117, 89, 68, 106], [97, 76, 53, 90], [115, 80, 75, 88], [71, 64, 47, 110], [61, 105, 99, 17], [80, 24, 106, 107], [78, 72, 84, 125], [43, 82, 97, 62], [4, 94, 40, 19], [54, 102, 126, 5], [46, 95, 8, 69], [98, 73, 28, 85], [101, 68, 1, 90], [116, 104, 65, 115], [59, 2, 14, 21], [74, 39, 120, 100], [67, 15, 0, 38], [48, 77, 36, 127], [52, 109, 7, 13], [112, 58, 53, 60], [86, 26, 11, 108], [55, 79, 114, 93], [27, 30, 3, 91], [51, 113, 123, 20], [41, 31, 87, 37], [117, 70, 111, 121], [12, 16, 10, 35], [124, 44, 103, 9], [50, 33, 122, 23], [83, 89, 88, 32], [57, 42, 34, 56], [75, 119, 92, 81], [18, 63, 45, 49], [76, 6, 66, 25], [96, 22, 118, 29], [95, 51, 3, 88], [80, 35, 44, 66], [61, 58, 76, 82], [15, 29, 94, 53], [34, 57, 72, 28], [2, 83, 126, 118], [105, 43, 99, 93], [7, 84, 56, 81], [74, 122, 78, 37], [31, 96, 38, 48], [18, 64, 40, 111], [97, 8, 90, 1], [36, 46, 123, 33], [9, 19, 59, 49], [109, 24, 12, 70], [73, 20, 121, 79], [103, 42, 39, 50], [23, 125, 108, 106], [100, 55, 27, 5], [117, 17, 41, 87], [104, 112, 13, 16], [21, 65, 113, 10], [86, 101, 120, 107], [114, 127, 68, 89], [4, 52, 119, 22], [85, 30, 32, 91], [47, 77, 26, 110], [71, 75, 54, 6], [62, 63, 124, 98], [92, 102, 45, 11], [67, 25, 0, 60], [69, 14, 115, 116], [36, 3, 120, 89], [27, 112, 51, 81], [10, 23, 28, 103], [45, 75, 111, 26], [59, 14, 70, 101], [64, 77, 44, 61], [117, 46, 76, 6], [80, 4, 71, 68], [11, 47, 52, 124], [116, 65, 22, 53], [107, 0, 123, 21], [8, 31, 1, 121], [113, 90, 57, 67], [50, 105, 85, 97], [43, 109, 88, 104], [56, 86, 39, 49], [69, 66, 33, 7], [18, 15, 63, 95], [29, 106, 58, 84], [93, 92, 35, 48], [40, 16, 94, 12], [41, 9, 55, 119], [72, 87, 60, 79], [99, 30, 13, 100], [2, 73, 122, 91], [78, 5, 102, 82], [96, 19, 125, 42], [74, 114, 38, 54], [126, 83, 108, 127], [37, 17, 25, 34], [32, 20, 110, 62], [98, 115, 24, 118], [82, 66, 86, 120], [41, 71, 93, 18], [112, 51, 28, 107], [52, 89, 49, 114], [116, 85, 26, 10], [122, 67, 44, 54], [104, 115, 31, 23], [6, 87, 38, 90], [79, 47, 110, 37], [62, 69, 60, 77], [32, 57, 59, 70], [88, 27, 127, 29], [73, 95, 80, 35], [64, 108, 65, 8], [42, 0, 55, 22], [43, 96, 100, 92], [12, 16, 19, 76], [117, 21, 102, 45], [103, 25, 98, 20], [50, 124, 30, 75], [40, 118, 72, 68], [101, 53, 105, 106], [63, 5, 121, 33], [48, 111, 58, 14], [123, 2, 83, 84], [94, 99, 81, 24], [1, 36, 78, 109], [9, 39, 61, 125], [46, 13, 126, 34], [74, 91, 56, 119], [17, 4, 113, 11], [7, 15, 3, 97], [45, 41, 34, 24], [108, 105, 16, 72], [21, 109, 88, 25], [102, 35, 15, 22], [50, 96, 91, 87], [43, 17, 60, 1], [89, 56, 106, 99], [92, 62, 95, 38], [51, 113, 120, 36], [67, 86, 68, 10], [114, 126, 116, 66], [53, 18, 83, 4], [52, 78, 124, 90], [44, 125, 97, 118], [48, 6, 110, 11], [75, 58, 20, 49], [33, 64, 37, 32], [122, 29, 46, 23], [59, 70, 94, 31], [82, 77, 26, 79], [3, 65, 61, 7], [115, 39, 71, 12], [14, 100, 47, 13], [9, 107, 55, 117], [103, 30, 93, 98], [84, 28, 40, 101], [0, 85, 121, 2], [127, 123, 104, 76], [73, 80, 119, 81], [5, 42, 111, 19], [27, 74, 63, 112], [8, 54, 69, 57], [55, 119, 5, 91], [85, 9, 26, 89], [72, 99, 50, 21], [57, 98, 2, 71], [20, 33, 23, 70], [16, 115, 87, 93], [3, 118, 34, 67], [29, 106, 17, 42], [124, 63, 94, 24], [111, 25, 37, 35], [47, 84, 103, 31], [14, 120, 36, 92], [60, 11, 0, 74], [13, 123, 110, 114], [68, 6, 52, 122], [81, 10, 83, 27], [62, 7, 127, 1], [59, 104, 66, 113], [54, 39, 112, 19], [4, 65, 12, 121], [64, 107, 48, 49], [102, 105, 56, 8], [43, 46, 44, 51], [15, 58, 38, 76], [117, 53, 90, 41], [80, 82, 88, 75], [73, 79, 28, 100], [18, 61, 95, 77], [32, 126, 78, 22], [108, 86, 96, 97], [40, 45, 125, 101], [116, 30, 69, 109]]
w = BitArray('0b01010000010000010001111110100111000101111111110011001111010111111100010010101101101100110000100111111110001101010101110000111100')
x = encode(K, P, w)
assert x == BitArray('0b010100000100000100011111101001110001011111111100110011110101111111000100101011011011001100001001111111100011010101011100001111001110100011100011101010001010111110100101001000110001001011110010100000001010100000001001101011110111010010101000010101100101011110110001001001011101110110011101011001100001101000000110000001111100010011100110010010100000110110100011111101010011010110011100')
y = BitArray('0b000100000100000100001000100001100000001000101000010001000101011111000100001001000001001000001001001101100000000100000000000111001110100011100010101010001000100000000001000000110000001010110000100000001010000000001001001000000110000000101000000000100100000110000000000000001100000110011001011000100000101000000100000001101000010010100110000000100000010010100001001101010000010110000100')
q = BitArray('0b110011101011101000110111011010010011110111010101101110111010100000110011110110111010110100010010110010011111010001011110101000110000001000010101010100110111011110110100001000001011000001000111001010100100101001110110110111111001011110000101011111010001111000110001011011010001110001100100000001010111010101101010011110010101100001010000011111011000100100010010110000101011001001011010')
hat_y = decode(K, P, y, q)
assert hat_y is not None
hat_w = hat_y[:K]
assert hat_w == w
